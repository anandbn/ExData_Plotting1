cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran, r_version ==
| "3.1.1", country == "US")
filter(cran, r_version=="3.1.1",country=="US")
?Comparison
filter(cran,country=="INDIA",version<="3.0.2")
filter(cran,country=="IN",version<="3.0.2")
info()
filter(cran,version<="3.0.2",country=="IN")
bye()
swirl()
filter(cran,version<=3.0.2,country=="IN")
filter(cran,version <= "3.0.2", country=="IN")
filter(cran,r_version <= "3.0.2", country=="IN")
filter(cran, country == "US" | country == "IN")
filter(cran,size>100500)
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size / 2^20)
mutate(cran3,size_mb=size / 2^20, size_gb =size_mb / 2^10)
mutate(cran3,correct_siz=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
csvFilePath <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(csvFilePath,method="curl")
download.file(csvFilePath,destFile="american_comm_survey.csv",method="curl")
download.file(csvFilePath,destfile="american_comm_survey.csv",method="curl")
library(dplyr)
mydf <- read.csv("american_comm_survey.csv")
dim(mydf)
mydata <- tbl_df(mydf)
rm(mydf)
tbl_df
mydata
mydata2 <- select(mydata,VAL)
mydata2
mydata3 <- filter(mydata,VAL>=1000000)
dim(mydata3)
rm(mydata3)
rm(mydata2)
mydata
getwd()
mydata2 <- filter(mydata,VAL==24)
dim(mydata2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",destfile="ngap.xlsx",method="curl")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages("rJava")
install.packages("rJava")
libary(xlsx)
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",destfile="myxml.xml",method="curl")
version
java
install.packages("xslx")
install.packages("~/Downloads/xlsx_0.5.7.tgz", repos = NULL, type = .Platform$pkgType)
library(xlsx)
install.packages("rJava")
install.packages("rJava")
library(xlsx)
install.packages("xlsxjars")
library(xlsx)
read.csv("ngap.csv")
dat <- read.csv("ngap.csv")
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
library(XML)
doc <- xmlTreeParse("myxml.xml")
doc
rootNode <- xmlRoot(doc)
names(rootNode)
xmlSize(rootNode)
xmlDF <- xmlToDataFrame(doc)
xmlDF <- xmlToDataFrame(rootNode)
xmlDF <- xmlToDataFrame("myxml.xml")
xmlDF
dim(xmlDF)
names(xmlDF)
head(xmlDF)
library(dplyr)
install.packages("dplyr")
library(dplyr)
xmlDF1 <- tbl_df(xmlDF)
myRows <- xmlSApply(doc,"//row/row")
myRows <- xmlSApply(doc,"//row/row",xmlValue)
myRows <- xpathSApply(doc,"//row/row")
myRows <- xpathSApply(doc,"//row/row",xmlValue)
myRows <- xpathSApply(rootNode,"//row/row",xmlValue)
myRows <- xpathSApply(rootNode,"//row/row")
dim(myRows)
View(myRows)
library(XML)
library(methods)
xmlDataFrame <- xmlToDataFrame("myxml.xml")
head(xmlDataFrame)
View(xmlDataFrame)
myRows <- xpathSApply(rootNode,"/row/row")
myRows <- xpathSApply(rootNode,"/row/row",xmlValue)
myRows <- xPathSApply(rootNode,"/row/row",xmlValue)
myRows <- xpathSApply(rootNode,"//row/row",xmlValue)
doc <- xmlTreeParse("myxml.xml")
rootNode <- xmlRoot(doc)
rootNode <- xpathSApply(rootNode,"/row",xmlValue)
dim(rootNode)
xmlSize(rootNode)
rootNode <- xmlRoot(doc)
rootNode <- xpathSApply(rootNode,"//row/row",xmlValue)
rootNode <- xpathSApply(rootNode,"//row/row")
View(rootNode)
rootNode <- xmlRoot(doc)
myRowtop <- rootNode$row
print(rootNode)
print(rootNode,1:2)
xpathSApply(doc,"//row",xmlValue)
xpathSApply(doc,"//row",xmlValue)
xpathSApply(doc,"//row",xmlValue)
myRows <- xpathSApply(doc,"//row",xmlValue)
myRows <- xpathSApply(rootNode),"//row",xmlValue)
myRows <- xpathSApply(rootNode,"//row",xmlValue)
doc <- xmlTreeParse("myxml.xml",useInternalNodes = TRUE )
rootNode <- xmlRoot(doc)
myRows <- xpathSApply(rootNode,"//row",xmlValue)
myRows <- xpathSApply(rootNode,"//row/row",xmlValue)
print(myRows)
dim(myRows)
xmlSize(myRows)
myRows <- xpathSApply(rootNode,"//row/row/zipcode",xmlValue)
xmlSize(myRows)
names(myRows)
data.frame(myRows)
library(dplyr)
myDF <- tbl_df(myRows)
View(myDF)
name(myDF)
myDF
filter(myDF,value=="21231")
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(data.table)
library(data.table)
install.packages("data.table")
library(data.table)
DT <-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",destfile="sspid.csv",method="curl")
DT <- fread("sspid.csv")
system.tim(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15));system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.tim(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
install.packages("rbenchmark")
library(rbenchmark)
benchmark(mean(DT$pwgtp15,by=DT$SEX))
benchmark(mean(DT$pwgtp15,by=DT$SEX),sapply(split(DT$pwgtp15,DT$SEX),mean))
benchmark(mean(DT$pwgtp15,by=DT$SEX),sapply(split(DT$pwgtp15,DT$SEX),mean),mean(DT[DT$SEX==1,]$pwgtp15),mean(DT[DT$SEX==2,]$pwgtp15))
benchmark(mean(DT$pwgtp15,by=DT$SEX),sapply(split(DT$pwgtp15,DT$SEX),mean),mean(DT[DT$SEX==1,]$pwgtp15),mean(DT[DT$SEX==2,]$pwgtp15),rowMeans(DT)[DT$SEX==1])
benchmark(mean(DT$pwgtp15,by=DT$SEX),sapply(split(DT$pwgtp15,DT$SEX),mean),mean(DT[DT$SEX==1,]$pwgtp15),mean(DT[DT$SEX==2,]$pwgtp15),tapply(DT$pwgtp15,DT$SEX,mean)
)
mean(DT$pwgtp15, by = DT$SEX)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="empdata.csv",method="curl")
library(datasets)
data(cars)
with(cars,plot(speed,dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
install.package("ggplot2")
install.packages("ggplot2")
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
library(datasets)
hist(airquality$Ozone)
library(datasets)
with(airquality, plot(Wind, Ozone))
?par
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)",col=green)
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)",col="green")
par(lty)
par("lty")
?par
library(datasets)
with(airquality, plot(Wind, Ozone,pch="A"))
library(datasets)
with(airquality, plot(Wind, Ozone,pch="."))
library(datasets)
with(airquality, plot(Wind, Ozone,pch="x"))
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "cyan"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})/
q
?Device
?Devices
pdf(file = "myplot.pdf") ## Open PDF device; create 'myplot.pdf' in my working directory
## Create plot and send to a file (no plot appears on screen)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data") ## Annotate plot; still nothing on screen
dev.off() ## Close the PDF file device
## Now you can view the file 'myplot.pdf'
library(swirl)
install.packages("swirl")
packageVersion(swirl)
library(swirl)
packageVersion(swirl)
packageVersion("swirl")
install_from_swirl("install_from_swirl("Exploratory Data Analysis")")
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
his(ppm,color="green")
hist(ppm,color="green")
hist(ppm,col="green")
rug(ppm)
rug(high)
print(high)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12)
abline(v=12,lwd=2)
abline(v=12,lwd=2,col="magenta")
abline(v=12,lwd=4,col="magenta")
abline(v=medim(ppm),lwd=4,col="magenta")
abline(v=median(ppm),lwd=4,col="magenta")
abline(v = median(ppm),lwd=4,col="magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplt(reg,col="wheat",main="Number of Counties in Each Region")
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm~region,data=pollution,col="red")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region=="east")
east
head(east)
hist(east$pm25,col="green")
hist(ppm$pm25,col="green")
ppm[region=="west"]
ppm[ppm$region=="west"]
hist(subset(pollution,region=="west")$pm25,col="green")
plot(pollution)
plot(pollution,pm25)
with(pollution, plot(latitude, pm25))
abline(h=12)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar =
| c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar =c(5, 4, 2, 1))
west <- subset(pollution,region=-"west")
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="Eest")
plot(east$latitude,east$pm25,main="East")
swirl()
?Devices
with(faithful,plot(eruptions,waiting))
with(faithful,plot(eruptions,waiting,main="Old Faithful Geyser data"))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting,main="Old Faithful Geyser data"))
with(faithful,plot(eruptions,waiting))
with(faithful,plot(eruptions,waiting,main="Old Faithful Geyser data"))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png,"geyserplt.png")
dev.copy(png,"geyserplot.png")
dev.copy("png",file="geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state,c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,
| 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
siwrl()
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
hist(airquality$Ozone)
swirl()
hist(airquality$Ozone)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl(())
swirl(
)
library(datasets)
table(airquality$Month)
boxplot(Ozone~Month,data = airquality)
boxplot(Ozone~Month,data = airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,data = airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red",main="Ozone and Wind in New York City")
title("Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone,type="n")
title("Wind and Ozone in NYC")
map <- subset(airquality,month==5)
map <- subset(airquality,airquality$month==5)
map <- subset(airquality,Month==5)
may <- subset(airquality,Month==5)
examples
examples()
?par
points(may,pch=2,col="blue")
points(may$Wind,may$Ozone,pch=2,col="blue")
points(may$Wind,may$Ozone,pch=17,col="blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality,Month!=5)
?par
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",c(17,8),c("blue,red"),c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue,red"),lengend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue,red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Solar.Temp,airquality$Ozone,main="Ozone and Temperature")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City",outer=TRUE)
?Devices
setwd("/Users/anarasimhan/Desktop/Datascience/courses-master/04_ExploratoryAnalysis/ExData_Plotting1")
?read.table
mydata <- read.table("household_power_consumption.txt",sep=";")
dim(mydata)
names(mydata)
head(mydata)
mydata <- read.table("household_power_consumption.txt",sep=";",header=TRUE)
names(mydata)
library(dplyr)
mydf <- tbl_df(mydata)
mydf
feb_01_02 <- filter(mydf,Date=="01/02/2007"|Date=="02/02/2007")
dim(feb_01_02)
names(feb_01_02)
feb_01_02
print(feb_01_02)
View(feb_01_02)
table(mydata,Date)
table(mydata,mydata$Date)
names(mydf)
subset(mydf)
?subset
feb_01_02 <- subset(mydf,Date=="16/12/2006")
feb_01_02 <- subset(mydf,Date=="01/02/2007"||Date=="02/02/2007")
feb_01_02 <- subset(mydf,Date=="01/02/2007")
feb_01_02 <- subset(mydf,Date=="1/2/2007")
feb_01_02 <- subset(mydf,Date=="1/2/2007" |  Date == '2/2/2007')
dim(feb_01_02)
head(feb_01_02)
hist(feb_01_02,freq = true)
hist(feb_01_02$Global_active_power,freq = true)
mydata <- read.table("household_power_consumption.txt",sep=";",header=TRUE,colClasses = c("Date","Time",))
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
setClass('myDate')
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
setClass('myTime')
setAs("character","myTime", function(from) (from, format="%d/%m/%Y") )
times <- c("23:03:20", "22:29:56", "01:03:30", "18:21:03", "16:56:26")
x <- paste(times)
strptime(x,"%H:%M:%s")
setAs("character","myTime", function(from) (from, format="%H:%M:%s") )
setAs("character","myDate", function(from) strptime(from, format="%H:%M:%s") )
setAs("character","myTime", function(from) strptime(from, format="%H:%M:%s") )
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") )
names(mydata)
myTypes <- c("myDate","myTime","numeric","numeric","numeric","numeric","numeric","numeric","numeric")
mydata <- read.table("household_power_consumption.txt",header=TRUE,sep=";",colClasses = myTypes)
mydata <- read.table(file="household_power_consumption.txt",header=TRUE,sep=";",colClasses = myTypes)
mydata <- read.table(file="household_power_consumption.txt",header=TRUE,sep=";")
mydata <- read.table(file="household_power_consumption.txt",header=TRUE,sep=";",colClasses = c("myDate","myTime","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
mydata <- read.table(file="household_power_consumption.txt",colClasses = c("myDate","myTime","numeric","numeric","numeric","numeric","numeric","numeric","numeric"),header=TRUE,sep=";")
?read.table
mydata <- read.table(file="household_power_consumption.txt",colClasses = c("myDate","myTime","numeric","numeric","numeric","numeric","numeric","numeric","numeric"),header=TRUE,sep=";",na.strings = "?")
classes(mydata)
theClasses <- sapply(mydata,class)
theClasses
head(mydata)
?hist
summary(mydata$Global_active_power)
hist(mydata$Global_active_power,freq = TRUE)
hist(mydata$Global_active_power,freq = TRUE,xlab="Global Active Power (kilowatts)")
hist(mydata$Global_active_power,freq = TRUE,xlab="Global Active Power (kilowatts)",col="red")
hist(mydata$Global_active_power,xlab="Global Active Power (kilowatts)",col="red")
?par
feb_01_01 <- subset(mydata,Date=="1/2/2017")
feb_01_01 <- subset(mydata,Date==1/2/2017)
feb_01_01 <- subset(mydata,Date==as.Date("1/2/2017","%d/%m/%Y"))
feb_01_01 <- subset(mydata,Date==01-02-2007)
feb_01_01 <- subset(mydata,Date==01-02-2007)
head(mydata)
feb_01_01 <- subset(mydata,Date==2007-02-01)
feb_01_01 <- subset(mydata,Date=="2007-02-01")
feb_01_02 <- subset(mydata,Date=="2007-02-01"|Date=="2007-02-02")
hist(feb_01_02$Global_active_power,col="red",xlab="Global Active Power (kilowatts)")
dev.capabilities()
?Devices
pmg("plot1.png")
png("plot1.png")
dev.cur()
hist(feb_01_02$Global_active_power,col="red",xlab="Global Active Power (kilowatts)")
dev.off()
png("plot1.png")
hist(feb_01_02$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
dev.off()
png("plot1.png")
?png
png("plot1.png",width=480,height = 480)
